// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUTH_NET_H_
#define FLATBUFFERS_GENERATED_AUTH_NET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Net {

struct CreateAccount;
struct CreateAccountBuilder;

struct LoginRequest;
struct LoginRequestBuilder;

struct LogoutRequest;
struct LogoutRequestBuilder;

struct ProfileRequest;
struct ProfileRequestBuilder;

struct ProfileResponse;
struct ProfileResponseBuilder;

struct AuthPacket;
struct AuthPacketBuilder;

struct AuthResponse;
struct AuthResponseBuilder;

enum AuthType : int8_t {
  AuthType_NONE = 0,
  AuthType_CREATE = 1,
  AuthType_LOGIN = 2,
  AuthType_LOGOUT = 3,
  AuthType_PROFILEREQ = 4,
  AuthType_PROFILERES = 5,
  AuthType_MIN = AuthType_NONE,
  AuthType_MAX = AuthType_PROFILERES
};

inline const AuthType (&EnumValuesAuthType())[6] {
  static const AuthType values[] = {
    AuthType_NONE,
    AuthType_CREATE,
    AuthType_LOGIN,
    AuthType_LOGOUT,
    AuthType_PROFILEREQ,
    AuthType_PROFILERES
  };
  return values;
}

inline const char * const *EnumNamesAuthType() {
  static const char * const names[7] = {
    "NONE",
    "CREATE",
    "LOGIN",
    "LOGOUT",
    "PROFILEREQ",
    "PROFILERES",
    nullptr
  };
  return names;
}

inline const char *EnumNameAuthType(AuthType e) {
  if (::flatbuffers::IsOutRange(e, AuthType_NONE, AuthType_PROFILERES)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAuthType()[index];
}

enum ResultCode : int8_t {
  ResultCode_SUCCESS = 0,
  ResultCode_FAIL = 1,
  ResultCode_DUPLICATE = 2,
  ResultCode_NOT_FOUND = 3,
  ResultCode_WRONG_PASSWORD = 4,
  ResultCode_TOO_MANY_ATTEMPTS = 5,
  ResultCode_MIN = ResultCode_SUCCESS,
  ResultCode_MAX = ResultCode_TOO_MANY_ATTEMPTS
};

inline const ResultCode (&EnumValuesResultCode())[6] {
  static const ResultCode values[] = {
    ResultCode_SUCCESS,
    ResultCode_FAIL,
    ResultCode_DUPLICATE,
    ResultCode_NOT_FOUND,
    ResultCode_WRONG_PASSWORD,
    ResultCode_TOO_MANY_ATTEMPTS
  };
  return values;
}

inline const char * const *EnumNamesResultCode() {
  static const char * const names[7] = {
    "SUCCESS",
    "FAIL",
    "DUPLICATE",
    "NOT_FOUND",
    "WRONG_PASSWORD",
    "TOO_MANY_ATTEMPTS",
    nullptr
  };
  return names;
}

inline const char *EnumNameResultCode(ResultCode e) {
  if (::flatbuffers::IsOutRange(e, ResultCode_SUCCESS, ResultCode_TOO_MANY_ATTEMPTS)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResultCode()[index];
}

struct CreateAccount FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreateAccountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct CreateAccountBuilder {
  typedef CreateAccount Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(CreateAccount::VT_USERNAME, username);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(CreateAccount::VT_PASSWORD, password);
  }
  explicit CreateAccountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CreateAccount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CreateAccount>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CreateAccount> CreateCreateAccount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  CreateAccountBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CreateAccount> CreateCreateAccountDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return Net::CreateCreateAccount(
      _fbb,
      username__,
      password__);
}

struct LoginRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct LoginRequestBuilder {
  typedef LoginRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(LoginRequest::VT_USERNAME, username);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(LoginRequest::VT_PASSWORD, password);
  }
  explicit LoginRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginRequest> CreateLoginRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  LoginRequestBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginRequest> CreateLoginRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return Net::CreateLoginRequest(
      _fbb,
      username__,
      password__);
}

struct LogoutRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogoutRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           verifier.EndTable();
  }
};

struct LogoutRequestBuilder {
  typedef LogoutRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(LogoutRequest::VT_USERNAME, username);
  }
  explicit LogoutRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogoutRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogoutRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogoutRequest> CreateLogoutRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0) {
  LogoutRequestBuilder builder_(_fbb);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogoutRequest> CreateLogoutRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  return Net::CreateLogoutRequest(
      _fbb,
      username__);
}

struct ProfileRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProfileRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           verifier.EndTable();
  }
};

struct ProfileRequestBuilder {
  typedef ProfileRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(ProfileRequest::VT_USERNAME, username);
  }
  explicit ProfileRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProfileRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProfileRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProfileRequest> CreateProfileRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0) {
  ProfileRequestBuilder builder_(_fbb);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProfileRequest> CreateProfileRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  return Net::CreateProfileRequest(
      _fbb,
      username__);
}

struct ProfileResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProfileResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JSON_DATA = 4
  };
  const ::flatbuffers::String *json_data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JSON_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_JSON_DATA) &&
           verifier.VerifyString(json_data()) &&
           verifier.EndTable();
  }
};

struct ProfileResponseBuilder {
  typedef ProfileResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_json_data(::flatbuffers::Offset<::flatbuffers::String> json_data) {
    fbb_.AddOffset(ProfileResponse::VT_JSON_DATA, json_data);
  }
  explicit ProfileResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProfileResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProfileResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProfileResponse> CreateProfileResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> json_data = 0) {
  ProfileResponseBuilder builder_(_fbb);
  builder_.add_json_data(json_data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProfileResponse> CreateProfileResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *json_data = nullptr) {
  auto json_data__ = json_data ? _fbb.CreateString(json_data) : 0;
  return Net::CreateProfileResponse(
      _fbb,
      json_data__);
}

struct AuthPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AuthPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_CREATE = 6,
    VT_LOGIN = 8,
    VT_LOGOUT = 10,
    VT_PROFILEREQ = 12,
    VT_PROFILERES = 14
  };
  Net::AuthType type() const {
    return static_cast<Net::AuthType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const Net::CreateAccount *create() const {
    return GetPointer<const Net::CreateAccount *>(VT_CREATE);
  }
  const Net::LoginRequest *login() const {
    return GetPointer<const Net::LoginRequest *>(VT_LOGIN);
  }
  const Net::LogoutRequest *logout() const {
    return GetPointer<const Net::LogoutRequest *>(VT_LOGOUT);
  }
  const Net::ProfileRequest *profilereq() const {
    return GetPointer<const Net::ProfileRequest *>(VT_PROFILEREQ);
  }
  const Net::ProfileResponse *profileres() const {
    return GetPointer<const Net::ProfileResponse *>(VT_PROFILERES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CREATE) &&
           verifier.VerifyTable(create()) &&
           VerifyOffset(verifier, VT_LOGIN) &&
           verifier.VerifyTable(login()) &&
           VerifyOffset(verifier, VT_LOGOUT) &&
           verifier.VerifyTable(logout()) &&
           VerifyOffset(verifier, VT_PROFILEREQ) &&
           verifier.VerifyTable(profilereq()) &&
           VerifyOffset(verifier, VT_PROFILERES) &&
           verifier.VerifyTable(profileres()) &&
           verifier.EndTable();
  }
};

struct AuthPacketBuilder {
  typedef AuthPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(Net::AuthType type) {
    fbb_.AddElement<int8_t>(AuthPacket::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_create(::flatbuffers::Offset<Net::CreateAccount> create) {
    fbb_.AddOffset(AuthPacket::VT_CREATE, create);
  }
  void add_login(::flatbuffers::Offset<Net::LoginRequest> login) {
    fbb_.AddOffset(AuthPacket::VT_LOGIN, login);
  }
  void add_logout(::flatbuffers::Offset<Net::LogoutRequest> logout) {
    fbb_.AddOffset(AuthPacket::VT_LOGOUT, logout);
  }
  void add_profilereq(::flatbuffers::Offset<Net::ProfileRequest> profilereq) {
    fbb_.AddOffset(AuthPacket::VT_PROFILEREQ, profilereq);
  }
  void add_profileres(::flatbuffers::Offset<Net::ProfileResponse> profileres) {
    fbb_.AddOffset(AuthPacket::VT_PROFILERES, profileres);
  }
  explicit AuthPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AuthPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AuthPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AuthPacket> CreateAuthPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Net::AuthType type = Net::AuthType_NONE,
    ::flatbuffers::Offset<Net::CreateAccount> create = 0,
    ::flatbuffers::Offset<Net::LoginRequest> login = 0,
    ::flatbuffers::Offset<Net::LogoutRequest> logout = 0,
    ::flatbuffers::Offset<Net::ProfileRequest> profilereq = 0,
    ::flatbuffers::Offset<Net::ProfileResponse> profileres = 0) {
  AuthPacketBuilder builder_(_fbb);
  builder_.add_profileres(profileres);
  builder_.add_profilereq(profilereq);
  builder_.add_logout(logout);
  builder_.add_login(login);
  builder_.add_create(create);
  builder_.add_type(type);
  return builder_.Finish();
}

struct AuthResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AuthResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_RESULT = 6,
    VT_MESSAGE = 8
  };
  Net::AuthType type() const {
    return static_cast<Net::AuthType>(GetField<int8_t>(VT_TYPE, 0));
  }
  Net::ResultCode result() const {
    return static_cast<Net::ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct AuthResponseBuilder {
  typedef AuthResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(Net::AuthType type) {
    fbb_.AddElement<int8_t>(AuthResponse::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_result(Net::ResultCode result) {
    fbb_.AddElement<int8_t>(AuthResponse::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(AuthResponse::VT_MESSAGE, message);
  }
  explicit AuthResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AuthResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AuthResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AuthResponse> CreateAuthResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Net::AuthType type = Net::AuthType_NONE,
    Net::ResultCode result = Net::ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  AuthResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_result(result);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AuthResponse> CreateAuthResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Net::AuthType type = Net::AuthType_NONE,
    Net::ResultCode result = Net::ResultCode_SUCCESS,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return Net::CreateAuthResponse(
      _fbb,
      type,
      result,
      message__);
}

inline const Net::AuthPacket *GetAuthPacket(const void *buf) {
  return ::flatbuffers::GetRoot<Net::AuthPacket>(buf);
}

inline const Net::AuthPacket *GetSizePrefixedAuthPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Net::AuthPacket>(buf);
}

inline bool VerifyAuthPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Net::AuthPacket>(nullptr);
}

inline bool VerifySizePrefixedAuthPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Net::AuthPacket>(nullptr);
}

inline void FinishAuthPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Net::AuthPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAuthPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Net::AuthPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Net

#endif  // FLATBUFFERS_GENERATED_AUTH_NET_H_
